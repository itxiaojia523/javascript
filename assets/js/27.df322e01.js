(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{429:function(n,e,a){"use strict";a.r(e);var t=a(2),o=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("创建对象的三种方式\n字面量 var obj = {name: '三毛'}\nnew Object\nvar obj = new Object()\nobj.name = name\n以上两种一次只能创建一个对象\n构造函数：将对象中相同得属性和方法抽象出来，封装到函数中")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("//1.申明构造函数\nfunction 构造函数名(){\n  this.属性 = 值\n  this.方法 = function (){}\n}\n//2.调用构造函数\nnew 构造函数名()\n")])])]),e("p",[n._v("调用对象\n1.对象名.属性名\n2.对象名['属性名']")]),n._v(" "),e("p",[n._v("new关键字执行过程\n1.创建一个空的对象\n2.this指向\n3.执行代码，添加属性和方法\n4.返回这个对象")]),n._v(" "),e("p",[n._v("遍历对象\nfor(var k in obj){ //一般写k或者jk\nconsole.log(k)//得到属性名\nconsole.log(obj[k])//得到属性值\n}")]),n._v(" "),e("p",[n._v("对象分类\n自定义对象\n内置对象：JS语言自带的一些对象\n以上两个属于ECMAScript\n浏览器对象（JS独有）\nMath对象\nMath.max() //返回-Infinity 什么不写\nMath.PI\nMath.abs() //绝对值\nMath.floor()//向下取整\nMath.round()//四舍五入\n注意\tMath.round(-1.5) //-1\nMath.random() // 0 <= x < 1")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("//随机获取两个数之间的整数（含两端）\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min; //含最大值，含最小值\n}\n//随机点名\nvar arr = ['毛','毛毛','毛毛毛']\nconsole.log(arr[getRandomInt(0,arr.length - 1)])\n")])])]),e("p",[n._v("日期对象:\nvar date = new Date() //返回当前时间 什么不写\n参数的常见写法 2021,5,19  //容易错，5月变6月\n或者是字符串 '2021-5-19 15:31:31' //常用\n日期对象的方法")]),n._v(" "),e("p",[n._v("日期的总的毫秒形式：距离1970.1.1过了多少毫秒\nDate对象是基于1970年1月1日（世界标准时间）起的毫秒数\n1.var date = newDate()\ndate.valueOf() 或者 date.getTime()\n2.简单写法 最常用\nvar date1 = +new Date()\n3.H5新增\nconsole.log(Date.now())")]),n._v(" "),e("p",[n._v("对象创建模型")]),n._v(" "),e("p",[n._v("方法1\tObject构造函数模式\n*先创建空obj,再添加属性\n*适用于不确定对象内部数据\n*问题：语句太多\nvar p = new Object()\np.name = 'Tome'\np.age = 'age'")]),n._v(" "),e("p",[n._v("方法2\t对象字面量模式\n*一条语句\n*使用{} 同时指定属性\n*适用于内部数据确定\n*问题：如果需要创建多个，有重复代码")]),n._v(" "),e("p",[n._v("var p = {\nname: 'Tome',\nage:= 'age'\n}")]),n._v(" "),e("p",[n._v("方法3\t工厂模式\n*通过工厂函数（返回一个对象的函数）创建对象并返回\n*适用于创建多个对象\n*问题：对象没有一个具体的类型，都是Obj")]),n._v(" "),e("p",[n._v("function createP(name,age) {\nvar obj = {\nname: name,\nage: age,\nsetName: function (){\nthis.name = name\n}\n}\nreturn obj\n}\nvar p1 = createP('Tome',12)\nvar p2 = createP('Bob',13)\n问题p1和p2都是obj")]),n._v(" "),e("p",[n._v("function createStudent(name,age,price) {\nvar obj = {\nname: name,\nage: age,\nprice:price\nsetName: function (){\nthis.name = name\n}\n}\nreturn obj\n}\nvar s1 = createStudent('Tim',12,12000)\n问题s1也是obj")]),n._v(" "),e("p",[n._v("以上三个对象没有具体类型")]),n._v(" "),e("p",[n._v("方法4\t自定义构造函数模式\n*通过new创建对象\n*场景：需要创建多个类型确定的对象\n*问题：每个对象都有相同的数据（方法），浪费内存\n*将这个方法放到原型中！方法5\n//定义构造函数\nfunction Person(name,age) {\nthis.name = name\nthis.age = age\nthis.setName = function (name){\nthis.name = name\n}\n}\n//创建对象\nvar p1 = new Person('Bob',99)\nconsole.log(p1 instanceof Person)")]),n._v(" "),e("p",[n._v("//定义构造函数 学生\nfunction Student(name,age) {\nthis.name = name\nthis.age = age\nthis.setName = function (name){\nthis.name = name\n}\n}\nvar s1 = new Student('Tim',22)")]),n._v(" "),e("p",[n._v("方法5\t构造函数+原型\nfunction Person(name,age) { //只初始化一般属性\nthis.name = name\nthis.age = age\n}\n}\nPerson.prototype.setName = function(name){\nthis.name = name //this是实例\n}")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("var p1 = new Person('Bob',99)\n")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);