(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{432:function(n,o,e){"use strict";e.r(o);var t=e(2),s=Object(t.a)({},(function(){var n=this,o=n._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[o("p",[n._v("ECMA:european computer manufacturers association\nECMAScript 是根绝ECMA-262标准的脚本程序设计语言\n接口请求函数模块\n// 包含所有接口请求函数模块\n// 1.同一暴露\n// export default{\n//     xxx(){},\n//     yyy(){}\n// }\nimport ajax from './ajax'\n// 2.分别暴露 以req开头，方便\n// 登录\nexport function reqLogin(username,password){\n    return ajax('/api/user/login',{name:username,password},\"POST\")\n}\n// 添加用户\nexport const reqAddUser = (user)=> ajax('/api/user/add',user,\"POST\")")]),n._v(" "),o("p",[n._v("兼容性查看\nkangax.github.io/compat-table/es6")]),n._v(" "),o("ol",[o("li")]),n._v(" "),o("p",[n._v("let申明变量：可以批量申明并赋值\n！不能重复申明")]),n._v(" "),o("p",[n._v("2.块级作用域 全局 函数 eval\n3.不存在变量提升\n4.不影响作用链 //不能由外向内找，作用域是由内向外，所以没关系")]),n._v(" "),o("p",[n._v("申明常量const\n1.一定要赋初始值\n2.一般用大小\n3.值不能修改\n4.堆数组和对象的元素的修改，不会报错，因为地址没变")]),n._v(" "),o("p",[n._v("解构赋值\n从数组和对象中提取值，堆变量进行赋值\nconst F4 = ['1','2','3','4']\nlet [yi,er,san,si] = F4\nconsole.log(yi) //1")]),n._v(" "),o("p",[n._v("从对象提取值\n注意：变量名=属性名\nconst zhao = {\nname: 'caocao'\n}\nlet {name} = zhao\nconsole.log(name)")]),n._v(" "),o("p",[n._v("新的声明字符串方式 反引号`` //tab上面\n内容中可以直接换行 之前需要'++'来连接\n直接拼接\nlet love = "),o("code",[n._v("毛毛")]),n._v("\nlet out = "),o("code",[n._v("${love}是我的最爱")])]),n._v(" "),o("p",[n._v("简化对象的写法\n允许直接在大括号里直接写入变量，作为属性和方法\nlet name = 'mao'\nlet setName = function (name){\nthis.name = name\n}\nconst maomao = {\nname,\nsetName,\njump(){\nconsole.log("),o("code",[n._v("我能跳")]),n._v(")\n}\n}")]),n._v(" "),o("p",[n._v("允许使用箭头来定义函数\n箭头 =>\nlet fn = () =>{}\n箭头函数特性\nthis是静态的，指向函数声明时所在作用域下的this\n不能作为构造函数\n不能使用arguments\n箭头函数的简写\n1.省略小括号，当形参只有一个时\n2.省略花括号，当代码体只有一句时，return也得省略\n返回值：为执行结果")]),n._v(" "),o("p",[n._v("filter()函数\nconst arr = [1,3,4,5,6]\nconst result = arr.filter(function(){\nif(item % 2 ===0 ){\nreturn ture\n}else{\nreturn false\t\n}\n})\t\t\nconsole.log(result) // 4 6\n或\nconst result = arr.filter(items => item % 2 === 0)")]),n._v(" "),o("p",[n._v("箭头函数适用于\n1.与this无关的回调，定时器，数组的方法问题\n2.不适用与this有关的事件回调；对象的方法")]),n._v(" "),o("p",[n._v("允许给形参赋初始值\n具有默认值的参数，一般放后")]),n._v(" "),o("p",[n._v("与解构赋值组合")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("connect({\nhost: 'localhost',\nusername\" 'root',\n})\n")])])]),o("p",[n._v("function connect(options){\nlet host = options.host; //每次都写options麻烦\nlet username = options.username \t\n}\n改为\nfunction connect(host = '127.0.0.1',username,password,port){")]),n._v(" "),o("p",[n._v("}")]),n._v(" "),o("p",[n._v("引入rest参数用于代替arguements\n作为参数时，要放最后")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("function fn(a,b,...args){\nconsole.log(a)\nconsole.log(args)\t\n}\nfn(1,2,3,4,5)// a是1 b是2 args是[3,4,5]\n")])])]),o("p",[n._v("扩展运算符 ...")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("能将数组转为逗号分割的 参数序列\n")])])]),o("p",[n._v('const tf = [\'毛\',\'毛毛\',\'毛毛毛\']\nfunction test(){\nconsole.log(arguments)\n}\ntest(tf)//0: (3) ["毛", "毛毛", "毛毛毛"]\ntest(...tf)//0: "毛" 1: "毛毛" 2: "毛毛毛"')]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("应用1：数组的合并\n")])])]),o("p",[n._v("const tf = ['毛']\nconst kz = ['小','小小']\n//合并数组tf和kz\nconst hebing = [...tf, ...kz]\nconsole.log(hebing)//0: \"毛\" 1: \"小\" 2: \"小小\"")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("应用2：数据的克隆 //浅拷贝，如果是地址值，指向同一对象\n")])])]),o("p",[n._v("const kz = ['小','小小']\nconst  kelong = [...kz]\nconsole.log(kelong)//0: \"小\" 1: \"小小\"")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("应用3：将伪数组转为真正的数组\n")])])]),o("p",[n._v("const divs = document.querySelectorAll('div')\nconsole.log(divs)//nodelist里的proto是obj\nconst divArr = [...divs]\nconsole.log(divArr) //0: div1: div")]),n._v(" "),o("p",[n._v("新的原始数据类型symbol:表独一无二，类似字符串，值唯一，命名不会冲突\n不能与其他类型进行运算\n定义的对象属性不能用for in遍历\n用reflect.ownKeys获取所有键名")]),n._v(" "),o("p",[n._v("//创建symbol\nlet s1 = Symbol('毛'); //可以空，或者描述字符串，即注释\nlet s2 = Symbol('毛毛');\nconsole.log(s1 === s2) //false\n//创建symbol对象\nlet s3 = Symbol.for('毛毛');\nlet s4 = Symbol.for('毛毛')\nconsole.log(s3 === s4) //true")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[n._v("应用1：给对象添加属性或方法\n")])])]),o("p",[n._v("//想给game对象添加up down相关的方法，但是直接添加up或down可能有命名冲突\nlet game = {\nup: function () {\nconsole.log('我是game的属性up')\n},\n//添加方式2\n[Symbol('down相关')]: function () {\nconsole.log('down')\n}\n}\nlet methods = {\nup: Symbol('up相关'),\ndown: Symbol()\n};\n//添加方式1\ngame[methods.up] = function () {\nconsole.log('我是新来的up')\n};\nconsole.log(game) //up: ƒ () Symbol(down相关): ƒ () Symbol(up相关): ƒ ()")]),n._v(" "),o("p",[n._v("symbol的内置值：symbol的属性\nex.Symbol.hasInstance 整体作为对象的属性")]),n._v(" "),o("p",[n._v("class Person{\nstatic "),o("a",{attrs:{href:"param"}},[n._v("Symbol.hasInstance")]),n._v("{ //添加symbol.hasinstance 属性\nconsole.log(param) //参数是调用instanceof 的对象\nconsole.log('我被用于检测了，返回true吧')\nreturn true\n}\n}\nlet o = {}\nconsole.log(o instanceof Person)")]),n._v(" "),o("p",[n._v("const arr1 = [1,2]\nconst arr2 = [3,4]\nconsole.log(arr1.concat(arr2)) // 1,2,3,4\narr2[Symbol.isConcatSpreadable] = false //不可展开，不可分开，只能作为整体\nconsole.log(arr1.concat(arr2)) // [1,2,[3,4]]")]),n._v(" "),o("p",[n._v("迭代器\n为不同数据结构提供统一的访问机制\n任何数据结构，部署迭代器interator接口，就可以完成遍历操作\n使用for of 遍历\n原生具备interator接口的数据\narray arguments set map string typedarray nodelist")]),n._v(" "),o("p",[n._v("const arr1 = ['mao','maomao','maomaomao']\nfor (let v in arr1) {\nconsole.log(v) // 0 1 2 键名\n}\nfor (let x of arr1) {\nconsole.log(x) // mao maomao maomaomao 键值\n}")]),n._v(" "),o("p",[n._v("迭代器应用-自定义遍历数据\nconst banji = {\nname: 'class1',\nstus: [\n'mao',\n'maomao',\n],\n"),o("a",{attrs:{href:""}},[n._v("Symbol.iterator")]),n._v("{ //当被for of遍历时调用\n//4.什么索引遍历\nlet index = 0\nlet _this = this // banji\nreturn { //1.返回一个指针对象\nnext: function () { //2.添加一个next方法\nif (index < _this.stus.length){\nconst result = {value: _this.stus[index], done: false} //3. next方法的返回值 是一个对象\nindex++\nreturn result\n}else {\nreturn {value: undefined, done: true};\n}\n}\n};\n}\n}\n//需求：遍历这个对象，且返回stus这个数组中的value for in 返回的是key\n//banji.stus.forEach() 这是遍历数组\n//遍历这个对象\nfor (let s of banji){\nconsole.log(s)\n}")]),n._v(" "),o("p",[n._v("生成器：是一个函数，解决异步编程")])])}),[],!1,null,null,null);o.default=s.exports}}]);